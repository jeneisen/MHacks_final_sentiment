<html>
<head>

  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>

  <!-- CSS -->
  <link rel="stylesheet" type="text/css" href="css/bootstrap.css">
  <link rel="stylesheet" type="text/css" href="css/style.css">
  <!-- End of CSS -->

  <!-- Javascript -->
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
  <script type="text/javascript" src="js/bootstrap.min.js"></script>
  <script type="text/javascript" src="js/script.js"></script>

  <script type="text/javascript" src="http://mbostock.github.com/d3/d3.v2.js"></script>
    <script type="text/javascript" src="nvd3-master/nv.d3.js"> </script>

  <!-- End of Javascript -->

  <style type="text/css">
     svg {
     border:1px solid gray
    }

    #countries path {
      fill: #f5f5f5;
      stroke: #fff;
    }

    #arcs path {
      fill: none;
      stroke-opacity: .9;
    }
  </style>

  <title>Polimetrics</title>
</head>
<body>

  <div class="navbar navbar-fixed-top">
    <div class="navbar-inner">
      <a class="brand" href="#top" style="margin-left:5px;"><img src="img/logo.png" width="150" height="38"/></a>
      <ul class="nav">
        <li><a href="#viewer" style="border-top-left-radius: 6px;border-bottom-left-radius:6px"><img src="img/map.svg" style="width:20px;height:20px;"/></a></li>
        <li><a href="#navGraph"><img src="img/graph.svg" style="width:20px;height:20px;"/></a></li>
        <li><a href="#commentary" style="border-top-right-radius: 6px;border-bottom-right-radius:6px"><img src="img/social.svg" style="width:20px;height:20px;"/></a></li>
      </ul>
    </div>
  </div>

  <div style="margin-top:80px;"></div>

  <div id="chart"></div>
    <script type="text/javascript">

    var w = 960,
        h = 500;

    var useGreatCircles = true;

    d3.loadData = function() {
        var loadedCallback = null;
        var toload = {};
       
       var data = {};
        var formatTime = d3.time.format("%e %B");
        var loaded = function(name, d) {
          delete toload[name];
          data[name] = d;
          return notifyIfAll();
        };
        var notifyIfAll = function() {
          if ((loadedCallback != null) && d3.keys(toload).length === 0) {
            loadedCallback(data);
          }
        };
        var loader = {
          json: function(name, url) {
            toload[name] = url;
            d3.json(url, function(d) {
              return loaded(name, d);
            });
            return loader;
          },
          csv: function(name, url) {
            toload[name] = url;
            d3.csv(url, function(d) {
              return loaded(name, d);
            });
            return loader;
          },
          onload: function(callback) {
            loadedCallback = callback;
            notifyIfAll();
          }
        };
        return loader;
      };



    var projection = d3.geo.mercator()
        .translate([480, 300])
        .scale(970);
   
/*

 var projection = d3.geo.albers()
        .origin([-500, 300])
        .scale(100);  
  var projection = d3.geo.azimuthal()
        .origin([80, 400])
        .scale(200);

*/

    var path = d3.geo.path()
        .projection(projection);

    var arc = d3.geo.greatArc().precision(3) //3);

    var svg = d3.select("body").append("svg")
        .attr("width", w)
        .attr("height", h);

    var div = d3.select("body").append("div")   
    .attr("class", "tooltip")               
    .style("opacity", 0);

    var countries = svg.append("g").attr("id", "countries");
    var centroids = svg.append("g").attr("id", "centroids");
    var arcs = svg.append("g").attr("id", "arcs");

    svg.append("text")
      .attr("id", "loading")
      .attr("x", 5)
      .attr("y", 17)
      .attr("font-size", "9pt")
      .attr("font-family", "arial")
      .text("Loading...");

    d3.loadData()
      .json('countries', 'world_countries.json')
      .csv('nodes', 'refugee_nodes.csv')
      .csv('flows', 'refugee_flows.csv')
      .onload(function(data) {

        d3.select("#loading").attr("visibility", "hidden");

        var nodeDataByCode = {}, links = [];
        var maxMagnitude =
          d3.max(data.flows, function(d) { return Math.abs(d.Rating)});
        var magnitudeFormat = d3.format(",.0f");
        var max = 
          d3.max(data.flows,function(d) { return d.Rating});
        var min = 
          d3.min(data.flows,function(d) {return d.Rating});

        var arcWidth = d3.scale.linear().domain([min, 0, max]).range([3, 1, 3]);
        var minColor = 'red', midColor = 'white', maxColor = 'green';
        var arcColor = d3.scale.log().domain([min, 0, max]).range([minColor, midColor, maxColor]);
        var arcOpacity = d3.scale.log().domain([min, 0, max]).range([1.5, .5, 1.5]);

        countries.selectAll("path")
          .data(data.countries.features)
        .enter().append("path")
          .attr("d", path);





        function nodeCoords(node) { 
          var lon = parseFloat(node.Lon), lat = parseFloat(node.Lat);
          if (isNaN(lon) || isNaN(lat)) return null;
          return [lon, lat]; 
        }

        data.nodes.forEach(function(node) {
          node.coords = nodeCoords(node);
          node.projection = node.coords ? projection(node.coords) : undefined;
          nodeDataByCode[node.Code] = node;
        });

        //data.flows = data.flows.filter(function(d) { return (d.Origin == 'IDN' && d.Dest == 'USA') ||  (d.Origin == 'LBR'  &&  d.Dest == 'NZL' );  });

        data.flows.forEach(function(flow) {
          var o = nodeDataByCode[flow.Origin], co = o.coords, po = o.projection;
          var d = nodeDataByCode[flow.Dest], cd = d.coords, pd = d.projection;
          var magnitude = flow.Rating;
          if (co  &&  cd  &&  !isNaN(magnitude)) {
            links.push({
              source: co, target: cd,
              magnitude: magnitude,
              origin:o, dest:d,
              originp: po, destp:pd 
            });
          }
        });

        var tooltip = d3.select("#svg").append("div")
          .attr("class","tooltip")
          .style("opacity",0);

        var individualCircle = centroids.selectAll("circle")
          .data(data.nodes.filter(function(node) { return node.projection ? true : false }))
        .enter().append("circle")
          .attr("cx", function(d) { return d.projection[0] } )
          .attr("cy", function(d) { return d.projection[1] } )
          .attr("stroke","blue")
          .attr("r", 1.5)
          .attr("fill", "#000")
          .attr("opacity", 1);

        individualCircle.on("mouseover", function(d) {    
          tooltip.transition().duration(200).style("opacity", .9);
          tooltip.html(d)
          d3.select(this)
            .attr("stroke", "red")
            .attr("r", 3)
            .attr("marker-end", "url(#arrowHead)");
        })
        individualCircle.on("mouseout", function(d) {
            tooltip.transition().duration(500).style("opacity", 0);
            d3.select(this)
              .attr("stroke", "blue")
              .attr("r",1.5)
              .attr("stroke", gradientRefNameFun); })
          individualCircle.on("click", click);
          function click(d) {
            alert("Click!");
          }
        ;


        var strokeFun = function(d) { return arcColor(d.magnitude); };

        function splitPath(path) {
          var avgd = 0, i, d;
          var c, pc, dx, dy;
          var points = path.split("L");
          if (points.length < 2) return path;
          var newpath = [ points[0] ];
          var coords = points.map(function(d, i) {
            return d.substr(i > 0 ? 0 : 1).split(","); // remove M and split
          });

          // calc avg dist between points
          for (i = 1; i < coords.length; i++) {
            pc = coords[i-1]; c = coords[i];
            dx = c[0] - pc[0]; dy = c[1] - pc[1];
            d = Math.sqrt(dx*dx + dy*dy);
            c.push(d);  // push dist as last elem of c
            avgd += d;
          }
          avgd /= coords.length - 1;

          // for points with long dist from prev use M instead of L
          for (i = 1; i < coords.length; i++) {
            c = coords[i];
            newpath.push((c[2] > 5 * avgd ? "M" : "L") + points[i]);
          }
          return newpath.join("");
        }

        var gradientNameFun = function(d) { return "grd"+d.origin.Code+d.dest.Code; };
        var gradientRefNameFun = function(d) { return "url(#"+gradientNameFun(d)+")"; };

        var defs = svg.append("svg:defs");

        // see http://apike.ca/prog_svg_patterns.html
        defs.append("marker")
          .attr("id", "arrowHead")
          .attr("viewBox", "0 0 10 10")
          .attr("refX", 10)
          .attr("refY", 5)
          .attr("orient", "auto")
          //.attr("markerUnits", "strokeWidth")
          .attr("markerUnits", "userSpaceOnUse")
          .attr("markerWidth", 4*2)
          .attr("markerHeight", 3*2)
        .append("polyline")
          .attr("points", "0,0 10,5 0,10 1,5")
          .attr("fill", maxColor)
          //.attr("opacity", 0.5)
          ;


        var gradient = defs.selectAll("linearGradient")
          .data(links)
        .enter()
          .append("svg:linearGradient")
            .attr("id", gradientNameFun)
            .attr("gradientUnits", "userSpaceOnUse")
            .attr("x1", function(d) { 
              return d.originp[0]; })
            .attr("y1", function(d) { return d.originp[1]; })
            .attr("x2", function(d) { return d.destp[0]; })
            .attr("y2", function(d) { return d.destp[1]; })
            ;

        gradient.append("svg:stop")
            .attr("offset", "0%")
            .attr("stop-color", strokeFun)
            .attr("stop-opacity", .5);
        gradient.append("svg:stop")
            .attr("offset", "80%")
            .attr("stop-color", strokeFun)
            .attr("stop-opacity", .5);
        gradient.append("svg:stop")
            .attr("offset", "100%")
            .attr("stop-color", strokeFun)
            .attr("stop-opacity", .5);



        var arcNodes = arcs.selectAll("path")
          .data(links)
        .enter().append("path")
          //.attr("visibility", function(d) { return d.magnitude > 500 ? "visible" : "hidden"})
          .attr("stroke", gradientRefNameFun)
          //.attr("stroke", "red")
          //.attr("opacity", function(d) { return arcOpacity(d.magnitude); })
          //.attr("stroke", strokeFun)
          .attr("stroke-linecap", "round")
          .attr("stroke-width", function(d) { return arcWidth(d.magnitude); })
          .attr("d", function(d) { 
            if (useGreatCircles)
              return splitPath(path(arc(d)));
            else 
              return path({
                type: "LineString",
                coordinates: [d.source, d.target]
              });
          })
          .sort(function(a, b) {
            var a = a.magnitude, b = b.magnitude;
            if (isNaN(a)) if (isNaN(b)) return 0; else return -1; if (isNaN(b)) return 1;
            return d3.ascending(a, b); 
          });
        arcNodes.on("mouseover", function(d) { 
          d3.select(this)
            .attr("stroke", "b")
            .attr("marker-end", "url(#arrowHead)");
        })
        arcNodes.on("mouseout", function(d) {
            d3.select(this)
              .attr("marker-end", "none")
              .attr("stroke", gradientRefNameFun); });



        /*
        setTimeout(function() {
          arcs.selectAll("path").attr("marker-end", "url(#arrowHead)");
        }, 0);
        */

      });

    </script>
      <a title="this.name" class="tooltip" > this.name </a>

  <div id="content-main-container">
    
    <div id="navGraph" style="margin-top:1px;"></div>

    <div id="graph">
      <script src="http://www.amcharts.com/lib/amcharts.js" type="text/javascript"></script>
        <div id="chartdiv" style="width: 950px; height: 362px;margin:0 auto; margin-top: 25px;"></div>
          <script type="text/javascript">

          var chart;

          var chartData = [{
              date: new Date(2012, 0, 1),
              value: 8},
          {
              date: new Date(2012, 0, 1),
              value: 8},
          {
              date: new Date(2012, 0, 2),
              value: 10},
          {
              date: new Date(2012, 0, 3),
              value: 12},
          {
              date: new Date(2012, 0, 4),
              value: 14},
          {
              date: new Date(2012, 0, 5),
              value: 11},
          {
              date: new Date(2012, 0, 6),
              value: 6},
          {
              date: new Date(2012, 0, 7),
              value: 7},
          {
              date: new Date(2012, 0, 8),
              value: 9},
          {
              date: new Date(2012, 0, 9),
              value: 13},
          {
              date: new Date(2012, 0, 10),
              value: 15},
          {
              date: new Date(2012, 0, 11),
              value: 19},
          {
              date: new Date(2012, 0, 12),
              value: 21},
          {
              date: new Date(2012, 0, 13),
              value: 22},
          {
              date: new Date(2012, 0, 14),
              value: 20},
          {
              date: new Date(2012, 0, 15),
              value: 18},
          {
              date: new Date(2012, 0, 16),
              value: 14},
          {
              date: new Date(2012, 0, 17),
              value: 16},
          {
              date: new Date(2012, 0, 18),
              value: 18},
          {
              date: new Date(2012, 0, 19),
              value: 17},
          {
              date: new Date(2012, 0, 20),
              value: 15},
          {
              date: new Date(2012, 0, 21),
              value: 12},
          {
              date: new Date(2012, 0, 22),
              value: 10},
          {
              date: new Date(2012, 0, 23),
              value: 8}];


          AmCharts.ready(function() {
              // SERIAL CHART        
              chart = new AmCharts.AmSerialChart();
              chart.pathToImages = "http://www.amcharts.com/lib/images/";
              chart.dataProvider = chartData;
              chart.marginTop = 0;
              chart.marginRight = 10;
              chart.autoMarginOffser = 0;
              chart.categoryField = "date";


              // AXES
              // category
              var categoryAxis = chart.categoryAxis;
              categoryAxis.parseDates = true; // as our data is date-based, we set parseDates to true
              categoryAxis.minPeriod = "DD"; // our data is daily, so we set minPeriod to DD                 
              categoryAxis.gridAlpha = 0.10;
              categoryAxis.axisAlpha = 0;
              categoryAxis.inside = true;

              // value
              var valueAxis = new AmCharts.ValueAxis();
              valueAxis.tickLength = 0;
              valueAxis.axisAlpha = 0;
              valueAxis.gridAlpha = 0;
              valueAxis.showFirstLabel = false;
              valueAxis.showLastLabel = false;
              chart.addValueAxis(valueAxis);

              // GRAPH
              var graph = new AmCharts.AmGraph();
              graph.dashLength = 3;
              graph.lineColor = "#5475d3";
              graph.valueField = "value";
              graph.dashLength = 3;
              graph.bullet = "round";
              chart.addGraph(graph);

              // CURSOR
              var chartCursor = new AmCharts.ChartCursor();
              chart.addChartCursor(chartCursor);

              // SCROLLBAR
              var chartScrollbar = new AmCharts.ChartScrollbar();
              chart.addChartScrollbar(chartScrollbar);

              // HORIZONTAL Yellow RANGE
              var guide = new AmCharts.Guide();
              guide.value = 10;
              guide.toValue = 20;
              guide.fillColor = "#ffdb12";
              guide.inside = true;
              guide.fillAlpha = 0.5;
              guide.lineAlpha = 0;
              valueAxis.addGuide(guide);

              // TREND LINES
              // first trend line
              var trendLine = new AmCharts.TrendLine();
              trendLine.initialDate = new Date(2012, 0, 2, 12); // 12 is hour - to start trend line in the middle of the day
              trendLine.finalDate = new Date(2012, 0, 11, 12);
              trendLine.initialValue = 10;
              trendLine.finalValue = 19;
              trendLine.lineColor = "#00CCFF";
              chart.addTrendLine(trendLine);

              // second trend line
              trendLine = new AmCharts.TrendLine();
              trendLine.initialDate = new Date(2012, 0, 17, 12);
              trendLine.finalDate = new Date(2012, 0, 22, 12);
              trendLine.initialValue = 16;
              trendLine.finalValue = 10;
              trendLine.lineColor = "#00CCFF";
              chart.addTrendLine(trendLine);

              // WRITE
              chart.write("chartdiv");
          });         
                    
          </script>
    </div>

    <div id="compareBox"> 
      <ul class="countrySelect">
        <li class="pull-left">How Americans feel about . . . </li>

        <li class="pull-right" style="margin-right:330px;margin-top:10px;">
          <select>
            <option value="volvo">Volvo</option>
            <option value="saab">Saab</option>
            <option value="mercedes">Mercedes</option>
            <option value="audi">Audi</option>
          </select>
        </li>
    </div>

    <div id="commentary">
      <div class="pull-left twitter">
        <div style="margin-top:10px;"></div>
          <a class="twitter-timeline" href="https://twitter.com/poli_metrics" data-widget-id="381687799310610432">Tweets by @poli_metrics</a>
          <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");
          </script>
      </div>
      <div class="pull-left analysis">
        <ul style="margin-top:20px;margin-left:10px;"><span style="font-size:30px;">Commentary</span>
          <li><a href="#">Top Analysts</a></li>
          <li><a href="#">Analysis</a></li>
        </ul>
      </div>
      <div class="pull-right">

      </div>
    </div>
  </div>

</body>
</html>